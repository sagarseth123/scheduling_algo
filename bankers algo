#include<iostream>
#include<bits/stdc++.h>

using namespace std;

bool aval(int work[],int n,int need[],int m){
    int i=0;
    while(i<n){
        if(need[i]>work[i]){
            return 0;
        }
        i++;
    }
    return 1;
}

int main(){
    
    int tprocess=5;
    int tresources=3;
    
    int allocation[][tresources]={
    {0,1,0},
    {2,0,0},
    {3,0,2},
    {2,1,1},
    {0,0,2}
    };
    
    int max[][tresources]={
        {7,5,3},
        {3,2,2},
        {9,0,2},
        {2,2,2},
        {4,3,3}
    };
    int available[]={3,3,2};
    
    int need[][tresources]={
        {7,4,3},
        {1,2,2},
        {6,0,0},
        {0,1,1},
        {4,3,1}
    };
    
    int work[]={3,3,2};
    int finish[tprocess]={0,0,0,0,0};
    int f=0,i=0,j;
    
    vector<int> safety_state;

    while(f<tprocess){
        
        if(finish[i%tprocess]==0){
            if(aval(work,tresources,need[i],tresources)){
                j=0;
                while(j<tresources){
                    work[j] += allocation[i%tprocess][j];
                    j++;
                }
                finish[i%tprocess]=1;
                safety_state.push_back(i%tprocess);
                f++;
            }
        }
        i++;
    }
    
    cout<<"All process are done\n";
    for(int j=0;j<tprocess;j++){
        cout<<"P"<<safety_state[j]+1<<"  ";
    }
    
    
    return 0;
}

